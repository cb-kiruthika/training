
ALTER TABLE MARKS ADD UPDATED_AT TIME;
ALTER TABLE MARKS ADD CREATED_AT TIME;
ALTER TABLE MEDALS ADD CREATED_AT TIME;
ALTER TABLE MEDALS ADD UPDATED_AT TIME;
ALTER TABLE STUDENTS ADD CREATED_AT TIME;
ALTER TABLE STUDENTS ADD UPDATED_AT TIME;

UPDATE MARKS 
	SET QUARTERLY = 0 
	WHERE QUARTERLY IS NULL;
UPDATE MARKS 
	SET HALF_YEARLY = 0 
	WHERE HALF_YEARLY IS NULL;
UPDATE MARKS 
	SET ANNUAL = 0 
	WHERE ANNUAL IS NULL;

INSERT INTO MARKS 
	VALUES(NULL, 100001,1,88,77,99,2008,11,CURRENT_TIME,CURRENT_TIME);
UPDATE MARKS 
	SET ANNUAL = 0, UPDATED_AT = CURRENT_TIME 
	WHERE ID = LAST_INSERT_ID();


CREATE TABLE STUDENTS_SUMMARY(
    STUDENT_ID BIGINT(19) NOT NULL,
    STUDENT_NAME VARCHAR(19) NOT NULL,
    YEAR INT(11) DEFAULT NULL,
    PERCENTAGE INT(11) DEFAULT NULL,
    NO_OF_MEDALS INT(11) DEFAULT NULL
);   
  
INSERT INTO STUDENTS_SUMMARY (STUDENT_ID,STUDENT_NAME,YEAR,PERCENTAGE,NO_OF_MEDALS) 
    SELECT STUDENTS.ID, NAME AS STUDENT_NAME,T1.YEAR,PERCENTAGE,NO_OF_MEDALS  
        FROM 
        	STUDENTS 
        LEFT JOIN(
            (
                SELECT STUDENT_ID,YEAR,AVG(ANNUAL) AS PERCENTAGE 
                FROM MARKS 
                GROUP BY STUDENT_ID,YEAR
            ) 
            AS T1 
            INNER JOIN   
            (
                SELECT STUDENT_ID,YEAR,COUNT(STUDENT_ID) AS NO_OF_MEDALS 
                FROM MEDALS  
                GROUP BY STUDENT_ID,YEAR
            ) 
            AS T2 
            ON T1.STUDENT_ID = T2.STUDENT_ID AND T1.YEAR = T2.YEAR 
        )   
        ON T1.STUDENT_ID = STUDENTS.ID;



/*Triggers*/
ALTER TABLE MARKS ADD AVERAGE FLOAT DEFAULT NULL;
CREATE TRIGGER AVERGE 
    BEFORE UPDATE
    ON MARKS FOR EACH ROW 
    SET NEW.AVERAGE = (NEW.ANNUAL +NEW.QUARTERLY + NEW.HALF_YEARLY)/3;



ALTER TABLE MEDALS ADD MEDAL_RECEIVED VARCHAR(10) DEFAULT NULL;
CREATE TRIGGER MEDAL_RECEIVED_INS 
	BEFORE INSERT 
	ON MEDALS FOR EACH ROW 
	BEGIN 
		IF (NEW.MEDAL_WON IS NOT NULL) THEN SET NEW.MEDAL_RECEIVED = NEW.MEDAL_WON; 
			ELSE SET NEW.MEDAL_WON = NEW.MEDAL_RECEIVED; 
		END IF;
	END;
CREATE TRIGGER MEDAL_RECEIVED_UPD 
	BEFORE UPDATE 
	ON MEDALS FOR EACH ROW 
	BEGIN 
		IF (NEW.MEDAL_WON IS NOT NULL) THEN SET NEW.MEDAL_RECEIVED = NEW.MEDAL_WON; 
			ELSE SET NEW.MEDAL_WON = NEW.MEDAL_RECEIVED; 
		END IF;
	END;
ALTER TABLE MEDALS DROP COLUMN MEDAL_RECEIVED;


