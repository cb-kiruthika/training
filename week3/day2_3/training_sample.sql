DROP DATABASE IF EXISTS training_sample;
CREATE DATABASE training_sample;
USE training_sample;

SOURCE /Users/cb-kiruthika/training/week3/day2_3/sample-sql-data.sql;
SHOW TABLES;
SELECT * FROM STUDENTS;
SELECT * FROM MARKS;
SELECT * FROM STUDENTS;

SELECT * FROM STUDENTS;
SELECT * FROM STUDENTS WHERE NAME LIKE 'H%';
SELECT * FROM STUDENTS WHERE NAME LIKE '%A%';
SELECT * FROM STUDENTS ORDER BY NAME;
SELECT * FROM STUDENTS ORDER BY NAME LIMIT 2;
SELECT * FROM STUDENTS ORDER BY NAME LIMIT 2,2;



--1
SELECT * FROM MARKS WHERE ANNUAL IS  NULL;
--2
SELECT STUDENT_ID, SUBJECT_ID, YEAR 
	FROM MARKS 
	WHERE ANNUAL IS NULL AND YEAR = 2005 ;
--3
SELECT STUDENT_ID, SUBJECT_ID, YEAR 
	FROM MARKS 
	WHERE COALESCE(QUARTERLY, HALF_YEARLY, ANNUAL) IS NOT NULL;
--4
SELECT STUDENT_ID, SUBJECT_ID, YEAR, QUARTERLY, HALF_YEARLY, ANNUAL 
	FROM MARKS 
	WHERE QUARTERLY >90 AND HALF_YEARLY >90 AND ANNUAL > 90;
--5
SELECT STUDENT_ID, SUBJECT_ID, (QUARTERLY + HALF_YEARLY + ANNUAL)/3 AS AVERAGE,YEAR 
	FROM MARKS;
--6
SELECT STUDENT_ID, SUBJECT_ID, (QUARTERLY + HALF_YEARLY + ANNUAL)/3 AS AVERAGE,YEAR 
	FROM MARKS 
	WHERE YEAR IN (2003, 2004);

/*Joins & SubQueries*/


--1
SELECT NAME, MARKS.* 
	FROM 
		STUDENTS 
	INNER JOIN 
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID 
	WHERE ANNUAL IS  NULL;  
--2
SELECT NAME, SUBJECT_ID, YEAR 
	FROM 
		STUDENTS 
	INNER JOIN 
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID 
	WHERE ANNUAL IS  NULL AND YEAR = 2005 ;
--3
SELECT NAME, SUBJECT_ID, YEAR 
	FROM 
		STUDENTS 
	INNER JOIN 
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID 
	WHERE COALESCE(QUARTERLY, HALF_YEARLY, ANNUAL) IS NOT NULL;
--4
SELECT NAME, SUBJECT_ID, YEAR, QUARTERLY, HALF_YEARLY, ANNUAL 
	FROM 
		STUDENTS 
	INNER JOIN 
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID 
	WHERE QUARTERLY >90 AND HALF_YEARLY >90 AND ANNUAL > 90;
--5
SELECT NAME, SUBJECT_ID, (QUARTERLY + HALF_YEARLY + ANNUAL)/3 AS AVERAGE,YEAR 
	FROM 
		STUDENTS 
	INNER JOIN 
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID ;
--6
SELECT NAME, SUBJECT_ID, (QUARTERLY + HALF_YEARLY + ANNUAL)/3 AS AVERAGE,YEAR 
	FROM 
		STUDENTS 
	INNER JOIN 
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID 
	WHERE YEAR IN (2003, 2004);


/*EXERCISES*/
--1
SELECT STUDENTS.NAME 
	FROM  
		STUDENTS 
	INNER JOIN 
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID 
	WHERE MARKS.QUARTERLY IS NULL AND MARKS.HALF_YEARLY IS NULL AND MARKS.ANNUAL IS NULL;
--2
SELECT STUDENTS.NAME, SUM(IFNULL(MARKS.ANNUAL,0)) AS MARKS ,MARKS.YEAR 
	FROM
		STUDENTS 
	LEFT JOIN
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID 
	GROUP BY MARKS.STUDENT_ID,YEAR;
	--3
SELECT STUDENTS.NAME, SUM(IFNULL(MARKS.QUARTERLY,0)) AS TOTAL, MARKS.GRADE 
	FROM 
		STUDENTS 
	LEFT JOIN
		MARKS 
	ON STUDENTS.ID = MARKS.STUDENT_ID  
	WHERE MARKS.YEAR = 2003 AND MARKS.QUARTERLY IS NOT NULL 
	GROUP BY MARKS.YEAR,MARKS.STUDENT_ID;
--4
SELECT STUDENTS.NAME, MEDALS.GRADE, COUNT(MEDALS.STUDENT_ID) AS NO_OF_MEDALS 
	FROM 
		STUDENTS 
	LEFT JOIN 
		MEDALS 
	ON MEDALS.STUDENT_ID = STUDENTS.ID 
	GROUP BY MEDALS.STUDENT_ID 
	HAVING NO_OF_MEDALS>3 AND (MEDALS.GRADE = 9 OR MEDALS.GRADE = 10);
--5
SELECT STUDENTS.NAME, MEDALS.GRADE, COUNT(MEDALS.STUDENT_ID) AS NO_OF_MEDALS 
	FROM 
		STUDENTS 
	LEFT JOIN 
		MEDALS 
	ON STUDENTS.ID = MEDALS.STUDENT_ID 
	GROUP BY STUDENTS.ID 
	HAVING NO_OF_MEDALS<2 ;
--6
SELECT NAME,YEAR
	FROM 
		STUDENTS 
	INNER JOIN(
		SELECT STUDENT_ID,MIN(ANNUAL),YEAR 
		FROM MARKS 
		GROUP BY STUDENT_ID,YEAR 
		HAVING MIN(ANNUAL)>90
	)AS T
	ON T.STUDENT_ID=STUDENTS.ID
	WHERE (ID,YEAR) NOT IN (
		SELECT DISTINCT STUDENT_ID,YEAR 
			FROM MEDALS
		);
--7
SELECT NAME, GAME_ID, MEDAL_WON,YEAR,GRADE 
	FROM 
		STUDENTS 
	INNER JOIN 
		MEDALS 
	ON STUDENTS.ID = MEDALS.STUDENT_ID  
	INNER JOIN  (
		SELECT MEDALS.STUDENT_ID,COUNT(STUDENT_ID) AS CNT 
			FROM MEDALS 
			GROUP BY STUDENT_ID 
			HAVING CNT>3
		) AS T 
	ON STUDENTS.ID = T.STUDENT_ID;
--8
SELECT NAME, MEDALS,QUARTERLY_PER,HALF_YEARLY_PER,ANNUAL_PER,T1.YEAR,GRADE 
	FROM 
		STUDENTS 
	LEFT JOIN 
		(
			SELECT STUDENT_ID, AVG(QUARTERLY) AS QUARTERLY_PER,AVG(HALF_YEARLY) AS  HALF_YEARLY_PER,AVG(ANNUAL)AS ANNUAL_PER,YEAR,GRADE 
				FROM MARKS 
				GROUP BY STUDENT_ID,YEAR 
		) AS T1 
		LEFT JOIN
		(
			SELECT STUDENT_ID,COUNT(STUDENT_ID) AS MEDALS, YEAR
				FROM  MEDALS 
				GROUP BY MEDALS.STUDENT_ID,MEDALS.YEAR 
		) AS T2
		ON T1.STUDENT_ID = T2.STUDENT_ID AND T1.YEAR = T2.YEAR 
	ON STUDENTS.ID = T1.STUDENT_ID;

--9
CREATE FUNCTION CONVGRADE(MK INT )
	RETURNS VARCHAR(1)
	BEGIN 
		DECLARE G VARCHAR(1);
		IF MK>=450 THEN SET G = 'S';
			ELSEIF MK>=400 THEN SET G = 'A';
			ELSEIF MK>=350 THEN SET G = 'B';
			ELSEIF MK>= 300 THEN SET G ='C';
			ELSEIF MK>=250 THEN SET G = 'D';
			ELSEIF MK>= 200 THEN SET G ='E';
			ELSE SET G = 'F';
		END IF;
		RETURN G;
	END
SELECT NAME,QUARTERLY_RATING,HALF_YEARLY_RATING,ANNUAL_RATING,T1.YEAR,GRADE 
	FROM 
		STUDENTS 
	LEFT JOIN 
		(
			SELECT STUDENT_ID, CONVGRADE(SUM(QUARTERLY)) AS QUARTERLY_RATING,CONVGRADE(SUM(HALF_YEARLY)) AS  HALF_YEARLY_RATING,CONVGRADE(SUM(ANNUAL)) AS ANNUAL_RATING,YEAR,GRADE 
			FROM MARKS 
			GROUP BY STUDENT_ID,YEAR 
		) AS T1 
	ON STUDENTS.ID = T1.STUDENT_ID;
